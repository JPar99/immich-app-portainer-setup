# -------------------------------------------------------------------
# Compose for Immich v1.139.4 + Immich PowerTools v0.18.0 (Synology + Portainer)
# Sources:
#   Immich:      https://github.com/immich-app/immich/tree/v1.139.4
#   PowerTools:  https://github.com/varun-raj/immich-power-tools/tree/v0.18.0
# -------------------------------------------------------------------
# Synology notes:
# - user: 1026:100 pins containers to your DSM user/group to avoid bind-mount permission issues.
#   How to find UID/GID: https://mariushosting.com/synology-find-uid-userid-and-gid-groupid-in-5-seconds
# - Keep DB_* and REDIS_* names consistent across .env and compose.
#   Immich expects DB_HOSTNAME; PowerTools expects DB_HOST (use the same value, e.g., "immich-db").
# -------------------------------------------------------------------

services:
  immich-redis:
    image: docker.io/valkey/valkey:${REDIS_VERSION}         # Valkey (Redis-compatible); version pinned via .env
    container_name: Immich-REDIS
    hostname: immich-redis
    security_opt:
      - no-new-privileges:true
    healthcheck:
      # Use valkey-cli for health; avoids relying on redis-cli symlink availability.
      test: ["CMD", "valkey-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
    user: 1026:100                                           # Required on Synology for correct file ownership
    environment:
      TZ: ${TZ}
    volumes:
      - ${REDIS_LOCATION}:/data:rw                           # Persist Valkey data
    restart: unless-stopped

  immich-db:
    # Immich-maintained Postgres image with pgvector (required for Immich search/vector features).
    image: ghcr.io/immich-app/postgres:16-vectorchord0.4.3-pgvectors0.2.0
    container_name: Immich-DB
    hostname: immich-db                                      # <<< Use this for Immich DB_HOSTNAME and PowerTools DB_HOST
    security_opt:
      - no-new-privileges:true
    volumes:
      - ${DB_DATA_LOCATION}:/var/lib/postgresql/data:rw      # DB persistence
    environment:
      TZ: ${TZ}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: '--data-checksums'               # Enable data checksums on init (integrity)
      DB_STORAGE_TYPE: ${DB_STORAGE_TYPE}
    restart: unless-stopped

  immich-server:
    # Immich server/web/API. Uses ${IMMICH_VERSION} (e.g., v1.139.4) or falls back to "release".
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    container_name: Immich-SERVER
    hostname: immich-server
    user: 1026:100                                           # Ensures write access to /data bind mounts on Synology
    security_opt:
      - no-new-privileges:true
    env_file:
      - stack.env                                            # Contains Immich vars (DB_HOSTNAME, DB_PORT, etc.)
    ports:
      - 8212:2283                                            # Expose Immich web; change host port as needed
    volumes:
      - ${UPLOAD_LOCATION}:/data:rw                          # Immich library (/data inside container)
      - /etc/localtime:/etc/localtime:ro                     # TZ sync
    restart: unless-stopped
    depends_on:
      immich-redis:
        condition: service_healthy
      immich-db:
        condition: service_started

  immich-machine-learning:
    # Background ML services (face/object recognition). Shares /data for media access.
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    container_name: Immich-LEARNING
    hostname: immich-machine-learning
    user: 1026:100
    security_opt:
      - no-new-privileges:true
    env_file:
      - stack.env                                            # Reuse DB/REDIS endpoints where applicable
    volumes:
      - ${UPLOAD_LOCATION}:/data:rw                          # Access to originals/thumbnails
      - ${CACHE_LOCATION}:/cache:rw                          # Model cache (avoid re-downloads)
      - ${CACHE_LOCATION}:/.cache:rw                         # Extra caches (torch/hf)
      - ${CACHE_LOCATION}:/.config:rw
      - ${MATPLOTLIB_LOCATION}:/matplotlib:rw                # Prevent matplotlib cache permission errors
    environment:
      MPLCONFIGDIR: /matplotlib
    restart: unless-stopped
    depends_on:
      immich-db:
        condition: service_started

  # -----------------------------------------------------------------
  # Companion service: Immich PowerTools (v0.18.0)
  # -----------------------------------------------------------------
  power-tools:
    container_name: immich_power_tools
    image: ghcr.io/varun-raj/immich-power-tools:${POWERTOOLS_VERSION:-latest}  # Default matches .env (no leading "v")
    ports:
      - 8001:3000                                            # PowerTools UI/API
    environment:
      # Database connectivity (PowerTools talks directly to the Immich Postgres)
      DB_PORT: ${DB_PORT}                                    # Default 5432
      DB_HOST: ${DB_HOST}                                    # MUST resolve to DB host (e.g., "immich-db")
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE_NAME: ${DB_DATABASE_NAME}

      # Immich API access
      IMMICH_API_KEY: ${IMMICH_API_KEY}                      # Use a Master API key with full privileges
      IMMICH_URL: ${IMMICH_URL}                              # Internal/base URL (e.g., http://<NAS-IP>:8212)
      EXTERNAL_IMMICH_URL: ${EXTERNAL_IMMICH_URL}            # Optional: public URL if exposed externally

      # Optional integrations
      GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}

    # Alternative: mirror Immich pattern by using env_file for PowerTools variables as well.
    # env_file:
    #   - stack.env

    restart: unless-stopped
    depends_on:
      immich-db:
        condition: service_started
