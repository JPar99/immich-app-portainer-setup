# Compose for Immich v1.139.3 + Immich PowerTools v0.18.0 on Synology via Portainer
# Sources:
# - Immich: https://github.com/immich-app/immich/tree/v1.139.3 
# - PowerTools: https://github.com/varun-raj/immich-power-tools/tree/v0.18.0
#
# Synology notes:
# - user: 1026:100 pins the container to your DSM user/group (required to avoid permission issues on mounted volumes). See https://mariushosting.com/synology-find-uid-userid-and-gid-groupid-in-5-seconds
# - Keep DB_* and REDIS_* names consistent across Immich and PowerTools (.env + compose). Immich uses DB_HOSTNAME; PowerTools expects DB_HOST. (See refs at bottom.)

services:
  immich-redis:
    image: docker.io/valkey/valkey:${REDIS_VERSION}   # Immich works with Redis/Valkey; pass version via .env
    container_name: Immich-REDIS
    hostname: immich-redis
    security_opt:
      - no-new-privileges:true
    healthcheck:
      # Simple liveness check; Valkey speaks Redis protocol so redis-cli ping works.
      test: ["CMD-SHELL", "redis-cli ping || exit 1"]
    user: 1026:100                           # Mandatory for Synology NAS: match DSM UID:GID that owns bind mounts
    environment:
      TZ: ${TZ}
    volumes:
      - ${REDIS_LOCATION}:/data:rw           # Persist Valkey data
    restart: unless-stopped

  immich-db:
    # Immich-maintained Postgres image with pgvector + tuning (required for search/vector features)
    # Tag aligns with Immich 1.139.x release line.
    image: ghcr.io/immich-app/postgres:16-vectorchord0.4.3-pgvectors0.2.0
    container_name: Immich-DB
    hostname: immich-db                      # <<< Use this hostname in Immich DB_HOSTNAME and PowerTools DB_HOST
    security_opt:
      - no-new-privileges:true
    volumes:
      - ${DB_DATA_LOCATION}:/var/lib/postgresql/data:rw  # DB persistence
    environment:
      TZ: ${TZ}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: '--data-checksums'           # Enable data checksums on init (integrity)
      DB_STORAGE_TYPE: ${DB_STORAGE_TYPE}                # Optional; kept for parity with Immich defaults
    restart: unless-stopped

  immich-server:
    # Immich server/web/API. Using release channel unless IMMICH_VERSION is set (e.g., v1.139.3)
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    container_name: Immich-SERVER
    hostname: immich-server
    user: 1026:100                           # Synology file perms on /data
    security_opt:
      - no-new-privileges:true
    env_file:
      - stack.env                             # Keep Immich vars here (DB_HOSTNAME, DB_PORT, DB_USERNAME, etc.)
    ports:
      - 8212:2283                             # Expose Immich web (change host port as needed)
    volumes:
      - ${UPLOAD_LOCATION}:/data:rw           # Immich library path (/data inside container)
      - /etc/localtime:/etc/localtime:ro      # TZ sync
    restart: unless-stopped
    depends_on:
      immich-redis:
        condition: service_healthy
      immich-db:
        condition: service_started

  immich-machine-learning:
    # Background ML services (face/object recognition). Shares /data for media access.
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    container_name: Immich-LEARNING
    hostname: immich-machine-learning
    user: 1026:100
    security_opt:
      - no-new-privileges:true
    env_file:
      - stack.env                             # Reuses Immich vars where applicable (e.g., DB/REDIS endpoints)
    volumes:
      - ${UPLOAD_LOCATION}:/data:rw           # Access to originals/thumbnails
      - ${CACHE_LOCATION}:/cache:rw           # Model cache (persist to avoid re-download)
      - ${CACHE_LOCATION}:/.cache:rw          # Extra caches (torch/hf)
      - ${CACHE_LOCATION}:/.config:rw
      - ${MATPLOTLIB_LOCATION}:/matplotlib:rw # Avoids permission issues for matplotlib cache on Synology
    environment:
      MPLCONFIGDIR: /matplotlib
    restart: unless-stopped
    depends_on:
      immich-db:
        condition: service_started

  # --- Companion service: Immich PowerTools v0.18.0 ---
  power-tools:
    container_name: immich_power_tools
    image: ghcr.io/varun-raj/immich-power-tools:${POWERTOOLS_VERSION:-v0.18.0}  # Pin to v0.18.0 for reproducibility
    ports:
      - 8001:3000                      
    environment:
      # Database connectivity (PowerTools talks directly to Immich Postgres)
      DB_PORT: ${DB_PORT}              # Default 5432 for Immich DB image
      DB_HOST: ${DB_HOST}              # MUST resolve to the DB container (e.g., "immich-db")
      # The following are typical Immich DB credentials; keep them identical to Immich server config.
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE_NAME: ${DB_DATABASE_NAME}

      # Immich API access (PowerTools needs API key + Immich URLs)
      IMMICH_API_KEY: ${IMMICH_API_KEY}                # Use an all privs api key
      IMMICH_URL: ${IMMICH_URL}                        # Internal/base URL (e.g., http://immich-server:2283 or http://<NAS-IP>:8212)
      EXTERNAL_IMMICH_URL: ${EXTERNAL_IMMICH_URL}      # Public URL if exposed to the internet (optional but recommended)

      # Optional integrations used by specific tools/features
      GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}

    # If you prefer, you can also use an env_file for PowerTools to mirror Immich's pattern.
    # env_file:
    #   - stack.env

    restart: unless-stopped
    depends_on:
      immich-db:
        condition: service_started
